{"ast":null,"code":"var _jsxFileName = \"/Users/david-mb14/code/fleetsweep/src/components/BidCalculator.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ResultsTable from './ResultsTable';\nimport CalculatorInputForm from \"./CalculatorInputForm\";\nimport { getBaseTimePerAcre, getFrequencyMultiplier } from \"../utils/calculateBid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BidCalculator = () => {\n  _s();\n  const [calculatedResults, setCalculatedResults] = useState([]);\n  const handleCalculate = values => {\n    const {\n      frequency,\n      sizeOfArea,\n      stateOfLot,\n      congestionFactor,\n      discount\n    } = values;\n    const frequencyMultiplier = getFrequencyMultiplier(frequency);\n    const baseTimePerAcre = getBaseTimePerAcre(sizeOfArea);\n    const congestionAdjustment = congestionFactor === 2 ? 1.15 : congestionFactor === 3 ? 1.25 : 1;\n    const stateAdjustment = stateOfLot === 2 ? 1.10 : stateOfLot === 3 ? 1.20 : 1;\n    const estimatedJobTime = baseTimePerAcre * sizeOfArea * frequencyMultiplier * congestionAdjustment * stateAdjustment;\n    const baseHourlyRate = 250; // minimum base rate\n    const rateAdjustment = sizeOfArea > 1 ? Math.max(210, baseHourlyRate - (sizeOfArea - 1) * 5) : baseHourlyRate;\n    const hourlyRate = rateAdjustment * congestionAdjustment * stateAdjustment;\n    const estimatedCost = estimatedJobTime / 60 * hourlyRate;\n    const totalBidAmountPerService = estimatedCost;\n    const totalBidAmountWithDiscount = totalBidAmountPerService * (1 - discount / 100);\n    const totalBidAmountPerMonth = totalBidAmountWithDiscount * frequencyMultiplier;\n    const result = {\n      estimatedJobTime,\n      hourlyRate,\n      estimatedCost,\n      totalBidAmountPerService,\n      totalBidAmountWithDiscount,\n      totalBidAmountPerMonth\n    };\n    setCalculatedResults([...calculatedResults, result]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CalculatorInputForm, {\n      onCalculate: handleCalculate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultsTable, {\n      results: calculatedResults\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(BidCalculator, \"BPrrtceFzGvQ/MwLHDKLVplfDVA=\");\n_c = BidCalculator;\nexport default BidCalculator;\nvar _c;\n$RefreshReg$(_c, \"BidCalculator\");","map":{"version":3,"names":["React","useState","ResultsTable","CalculatorInputForm","getBaseTimePerAcre","getFrequencyMultiplier","jsxDEV","_jsxDEV","BidCalculator","_s","calculatedResults","setCalculatedResults","handleCalculate","values","frequency","sizeOfArea","stateOfLot","congestionFactor","discount","frequencyMultiplier","baseTimePerAcre","congestionAdjustment","stateAdjustment","estimatedJobTime","baseHourlyRate","rateAdjustment","Math","max","hourlyRate","estimatedCost","totalBidAmountPerService","totalBidAmountWithDiscount","totalBidAmountPerMonth","result","children","onCalculate","fileName","_jsxFileName","lineNumber","columnNumber","results","_c","$RefreshReg$"],"sources":["/Users/david-mb14/code/fleetsweep/src/components/BidCalculator.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport ResultsTable from './ResultsTable';\nimport CalculatorInputForm from \"./CalculatorInputForm\";\nimport {BidFormValues} from \"../types/types\";\nimport {getBaseTimePerAcre, getFrequencyMultiplier} from \"../utils/calculateBid\";\n\nconst BidCalculator: React.FC = () => {\n  const [calculatedResults, setCalculatedResults] = useState<any[]>([]);\n\n  const handleCalculate = (values: BidFormValues) => {\n    const {\n      frequency,\n      sizeOfArea,\n      stateOfLot,\n      congestionFactor,\n      discount,\n    } = values;\n\n    const frequencyMultiplier = getFrequencyMultiplier(frequency);\n    const baseTimePerAcre = getBaseTimePerAcre(sizeOfArea);\n    const congestionAdjustment = congestionFactor === 2 ? 1.15 : congestionFactor === 3 ? 1.25 : 1;\n    const stateAdjustment = stateOfLot === 2 ? 1.10 : stateOfLot === 3 ? 1.20 : 1;\n    const estimatedJobTime = baseTimePerAcre * sizeOfArea * frequencyMultiplier * congestionAdjustment * stateAdjustment;\n    const baseHourlyRate = 250; // minimum base rate\n    const rateAdjustment = sizeOfArea > 1 ? Math.max(210, baseHourlyRate - (sizeOfArea - 1) * 5) : baseHourlyRate;\n    const hourlyRate = rateAdjustment * congestionAdjustment * stateAdjustment;\n    const estimatedCost = (estimatedJobTime / 60) * hourlyRate;\n    const totalBidAmountPerService = estimatedCost;\n    const totalBidAmountWithDiscount = totalBidAmountPerService * (1 - discount / 100);\n    const totalBidAmountPerMonth = totalBidAmountWithDiscount * frequencyMultiplier;\n\n    const result = {\n      estimatedJobTime,\n      hourlyRate,\n      estimatedCost,\n      totalBidAmountPerService,\n      totalBidAmountWithDiscount,\n      totalBidAmountPerMonth,\n    };\n    setCalculatedResults([...calculatedResults, result]);\n  };\n\n  return (\n    <div>\n      <CalculatorInputForm onCalculate={handleCalculate} />\n      <ResultsTable results={calculatedResults} />\n    </div>\n  );\n};\n\nexport default BidCalculator;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,mBAAmB,MAAM,uBAAuB;AAEvD,SAAQC,kBAAkB,EAAEC,sBAAsB,QAAO,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjF,MAAMC,aAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGV,QAAQ,CAAQ,EAAE,CAAC;EAErE,MAAMW,eAAe,GAAIC,MAAqB,IAAK;IACjD,MAAM;MACJC,SAAS;MACTC,UAAU;MACVC,UAAU;MACVC,gBAAgB;MAChBC;IACF,CAAC,GAAGL,MAAM;IAEV,MAAMM,mBAAmB,GAAGd,sBAAsB,CAACS,SAAS,CAAC;IAC7D,MAAMM,eAAe,GAAGhB,kBAAkB,CAACW,UAAU,CAAC;IACtD,MAAMM,oBAAoB,GAAGJ,gBAAgB,KAAK,CAAC,GAAG,IAAI,GAAGA,gBAAgB,KAAK,CAAC,GAAG,IAAI,GAAG,CAAC;IAC9F,MAAMK,eAAe,GAAGN,UAAU,KAAK,CAAC,GAAG,IAAI,GAAGA,UAAU,KAAK,CAAC,GAAG,IAAI,GAAG,CAAC;IAC7E,MAAMO,gBAAgB,GAAGH,eAAe,GAAGL,UAAU,GAAGI,mBAAmB,GAAGE,oBAAoB,GAAGC,eAAe;IACpH,MAAME,cAAc,GAAG,GAAG,CAAC,CAAC;IAC5B,MAAMC,cAAc,GAAGV,UAAU,GAAG,CAAC,GAAGW,IAAI,CAACC,GAAG,CAAC,GAAG,EAAEH,cAAc,GAAG,CAACT,UAAU,GAAG,CAAC,IAAI,CAAC,CAAC,GAAGS,cAAc;IAC7G,MAAMI,UAAU,GAAGH,cAAc,GAAGJ,oBAAoB,GAAGC,eAAe;IAC1E,MAAMO,aAAa,GAAIN,gBAAgB,GAAG,EAAE,GAAIK,UAAU;IAC1D,MAAME,wBAAwB,GAAGD,aAAa;IAC9C,MAAME,0BAA0B,GAAGD,wBAAwB,IAAI,CAAC,GAAGZ,QAAQ,GAAG,GAAG,CAAC;IAClF,MAAMc,sBAAsB,GAAGD,0BAA0B,GAAGZ,mBAAmB;IAE/E,MAAMc,MAAM,GAAG;MACbV,gBAAgB;MAChBK,UAAU;MACVC,aAAa;MACbC,wBAAwB;MACxBC,0BAA0B;MAC1BC;IACF,CAAC;IACDrB,oBAAoB,CAAC,CAAC,GAAGD,iBAAiB,EAAEuB,MAAM,CAAC,CAAC;EACtD,CAAC;EAED,oBACE1B,OAAA;IAAA2B,QAAA,gBACE3B,OAAA,CAACJ,mBAAmB;MAACgC,WAAW,EAAEvB;IAAgB;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrDhC,OAAA,CAACL,YAAY;MAACsC,OAAO,EAAE9B;IAAkB;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEV,CAAC;AAAC9B,EAAA,CA1CID,aAAuB;AAAAiC,EAAA,GAAvBjC,aAAuB;AA4C7B,eAAeA,aAAa;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}