{"ast":null,"code":"var _jsxFileName = \"/Users/david-mb14/code/fleetsweep/src/components/BidCalculator.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ResultsTable from './ResultsTable';\nimport CalculatorInputForm from \"./CalculatorInputForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BidCalculator = () => {\n  _s();\n  const [calculatedResults, setCalculatedResults] = useState([]);\n  const handleCalculate = inputData => {\n    const {\n      frequency,\n      areaSize,\n      stateOfLot,\n      congestionFactor,\n      discount\n    } = inputData;\n\n    // Perform calculations based on the input data.\n    // Example calculation (you'll replace with your actual logic):\n    const estimatedJobTime = Number(areaSize) * Number(frequency); // Simplified example\n    const baseHourlyRate = 250; // minimum base rate\n    const rateAdjustment = sizeOfArea > 1 ? Math.max(210, baseHourlyRate - (sizeOfArea - 1) * 5) : baseHourlyRate;\n    const hourlyRate = rateAdjustment * congestionAdjustment * stateAdjustment;\n    const estimatedCost = estimatedJobTime / 60 * hourlyRate;\n    const totalBidAmountPerService = estimatedCost;\n    const totalBidAmountWithDiscount = totalBidAmountPerService * (1 - discount / 100);\n\n    // Create result object\n    const result = {\n      frequency,\n      areaSize,\n      stateOfLot,\n      congestionFactor,\n      discount,\n      estimatedJobTime,\n      hourlyRate,\n      estimatedCost,\n      totalBidAmount\n    };\n\n    // Set result to state for display\n    setCalculatedResults([...calculatedResults, result]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CalculatorInputForm, {\n      onCalculate: handleCalculate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultsTable, {\n      data: calculatedResults\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(BidCalculator, \"BPrrtceFzGvQ/MwLHDKLVplfDVA=\");\n_c = BidCalculator;\nexport default BidCalculator;\nvar _c;\n$RefreshReg$(_c, \"BidCalculator\");","map":{"version":3,"names":["React","useState","ResultsTable","CalculatorInputForm","jsxDEV","_jsxDEV","BidCalculator","_s","calculatedResults","setCalculatedResults","handleCalculate","inputData","frequency","areaSize","stateOfLot","congestionFactor","discount","estimatedJobTime","Number","baseHourlyRate","rateAdjustment","sizeOfArea","Math","max","hourlyRate","congestionAdjustment","stateAdjustment","estimatedCost","totalBidAmountPerService","totalBidAmountWithDiscount","result","totalBidAmount","children","onCalculate","fileName","_jsxFileName","lineNumber","columnNumber","data","_c","$RefreshReg$"],"sources":["/Users/david-mb14/code/fleetsweep/src/components/BidCalculator.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport ResultsTable from './ResultsTable';\nimport CalculatorInputForm from \"./CalculatorInputForm\";\n\nconst BidCalculator: React.FC = () => {\n  const [calculatedResults, setCalculatedResults] = useState<any[]>([]);\n\n  const handleCalculate = (inputData: any) => {\n    const { frequency, areaSize, stateOfLot, congestionFactor, discount } = inputData;\n\n    // Perform calculations based on the input data.\n    // Example calculation (you'll replace with your actual logic):\n    const estimatedJobTime = Number(areaSize) * Number(frequency);  // Simplified example\n    const baseHourlyRate = 250; // minimum base rate\n    const rateAdjustment = sizeOfArea > 1 ? Math.max(210, baseHourlyRate - (sizeOfArea - 1) * 5) : baseHourlyRate;\n    const hourlyRate = rateAdjustment * congestionAdjustment * stateAdjustment;\n    const estimatedCost = (estimatedJobTime / 60) * hourlyRate;\n    const totalBidAmountPerService = estimatedCost;\n    const totalBidAmountWithDiscount = totalBidAmountPerService * (1 - discount / 100);\n\n    // Create result object\n    const result = {\n      frequency,\n      areaSize,\n      stateOfLot,\n      congestionFactor,\n      discount,\n      estimatedJobTime,\n      hourlyRate,\n      estimatedCost,\n      totalBidAmount,\n    };\n\n    // Set result to state for display\n    setCalculatedResults([...calculatedResults, result]);\n  };\n\n  return (\n    <div>\n      <CalculatorInputForm onCalculate={handleCalculate} />\n      <ResultsTable data={calculatedResults} />\n    </div>\n  );\n};\n\nexport default BidCalculator;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,mBAAmB,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,aAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGR,QAAQ,CAAQ,EAAE,CAAC;EAErE,MAAMS,eAAe,GAAIC,SAAc,IAAK;IAC1C,MAAM;MAAEC,SAAS;MAAEC,QAAQ;MAAEC,UAAU;MAAEC,gBAAgB;MAAEC;IAAS,CAAC,GAAGL,SAAS;;IAEjF;IACA;IACA,MAAMM,gBAAgB,GAAGC,MAAM,CAACL,QAAQ,CAAC,GAAGK,MAAM,CAACN,SAAS,CAAC,CAAC,CAAE;IAChE,MAAMO,cAAc,GAAG,GAAG,CAAC,CAAC;IAC5B,MAAMC,cAAc,GAAGC,UAAU,GAAG,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAG,EAAEJ,cAAc,GAAG,CAACE,UAAU,GAAG,CAAC,IAAI,CAAC,CAAC,GAAGF,cAAc;IAC7G,MAAMK,UAAU,GAAGJ,cAAc,GAAGK,oBAAoB,GAAGC,eAAe;IAC1E,MAAMC,aAAa,GAAIV,gBAAgB,GAAG,EAAE,GAAIO,UAAU;IAC1D,MAAMI,wBAAwB,GAAGD,aAAa;IAC9C,MAAME,0BAA0B,GAAGD,wBAAwB,IAAI,CAAC,GAAGZ,QAAQ,GAAG,GAAG,CAAC;;IAElF;IACA,MAAMc,MAAM,GAAG;MACblB,SAAS;MACTC,QAAQ;MACRC,UAAU;MACVC,gBAAgB;MAChBC,QAAQ;MACRC,gBAAgB;MAChBO,UAAU;MACVG,aAAa;MACbI;IACF,CAAC;;IAED;IACAtB,oBAAoB,CAAC,CAAC,GAAGD,iBAAiB,EAAEsB,MAAM,CAAC,CAAC;EACtD,CAAC;EAED,oBACEzB,OAAA;IAAA2B,QAAA,gBACE3B,OAAA,CAACF,mBAAmB;MAAC8B,WAAW,EAAEvB;IAAgB;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrDhC,OAAA,CAACH,YAAY;MAACoC,IAAI,EAAE9B;IAAkB;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEV,CAAC;AAAC9B,EAAA,CAvCID,aAAuB;AAAAiC,EAAA,GAAvBjC,aAAuB;AAyC7B,eAAeA,aAAa;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}