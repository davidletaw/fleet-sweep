{"ast":null,"code":"var _jsxFileName = \"/Users/david-mb14/code/fleetsweep/src/components/CalculatorForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalculatorForm = () => {\n  _s();\n  const [frequency, setFrequency] = useState('');\n  const [areaSize, setAreaSize] = useState('');\n  const [stateOfLot, setStateOfLot] = useState(1);\n  const [congestion, setCongestion] = useState(1);\n  const [discount, setDiscount] = useState(0);\n  const handleCalculate = inputs => {\n    const {\n      frequency,\n      areaSize,\n      stateOfLot,\n      congestionFactor,\n      discount\n    } = inputs;\n\n    // Lookup frequency data from the frequency key\n    const frequencyData = frequencyKey.find(f => f.key === frequency);\n    if (!frequencyData) throw new Error(\"Invalid frequency\");\n    const minutesPerAcre = frequencyData.minutesPerAcre;\n    const avgDaysPerMonth = frequencyData.avgDaysPerMonth;\n\n    // Calculate the hourly rate based on area and adjustments\n    const baseRate = 250; // Example base rate\n    const hourlyRate = baseRate - (areaSize > 1 ? (areaSize - 1) * 5 : 0) + (stateOfLot - 1) * 15 + (congestionFactor - 1) * 15;\n\n    // Ensure hourly rate is within a minimum threshold\n    const adjustedHourlyRate = Math.max(210, hourlyRate);\n\n    // Calculate estimated job time per service based on area and frequency\n    const jobTimeEstimate = Math.max(10, minutesPerAcre * areaSize * (1 + (congestionFactor === 2 ? 0.15 : congestionFactor === 3 ? 0.25 : 0)));\n\n    // Calculate estimated cost per service (time in hours * hourly rate)\n    const estimatedCost = jobTimeEstimate / 60 * adjustedHourlyRate;\n\n    // Apply discount to calculate total bid amount per service\n    const totalBidAmount = estimatedCost * (1 - discount / 100);\n\n    // Calculate monthly total bid by multiplying by average number of days per month\n    const totalMonthlyAmount = totalBidAmount * avgDaysPerMonth;\n    return {\n      hourlyRate: adjustedHourlyRate,\n      jobTimeEstimate,\n      estimatedCost,\n      totalBidAmount,\n      totalMonthlyAmount\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCalculate,\n      children: \"Calculate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(CalculatorForm, \"rcSysAeLgfAE2w3BzRp2ko2CM7g=\");\n_c = CalculatorForm;\nexport default CalculatorForm;\nvar _c;\n$RefreshReg$(_c, \"CalculatorForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CalculatorForm","_s","frequency","setFrequency","areaSize","setAreaSize","stateOfLot","setStateOfLot","congestion","setCongestion","discount","setDiscount","handleCalculate","inputs","congestionFactor","frequencyData","frequencyKey","find","f","key","Error","minutesPerAcre","avgDaysPerMonth","baseRate","hourlyRate","adjustedHourlyRate","Math","max","jobTimeEstimate","estimatedCost","totalBidAmount","totalMonthlyAmount","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/david-mb14/code/fleetsweep/src/components/CalculatorForm.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\ninterface CalculationInputs {\n  frequency: string;\n  areaSize: number;\n  stateOfLot: number;\n  congestionFactor: number;\n  discount: number;\n}\n\ninterface CalculationResults {\n  hourlyRate: number;\n  jobTimeEstimate: number;\n  estimatedCost: number;\n  totalBidAmount: number;\n  totalMonthlyAmount: number;\n}\n\nconst CalculatorForm = () => {\n  const [frequency, setFrequency] = useState('');\n  const [areaSize, setAreaSize] = useState<number | ''>('');\n  const [stateOfLot, setStateOfLot] = useState<number>(1);\n  const [congestion, setCongestion] = useState<number>(1);\n  const [discount, setDiscount] = useState<number>(0);\n\n\n\n  const handleCalculate = (inputs: CalculationInputs): CalculationResults => {\n    const { frequency, areaSize, stateOfLot, congestionFactor, discount } = inputs;\n\n    // Lookup frequency data from the frequency key\n    const frequencyData = frequencyKey.find((f) => f.key === frequency);\n    if (!frequencyData) throw new Error(\"Invalid frequency\");\n\n    const minutesPerAcre = frequencyData.minutesPerAcre;\n    const avgDaysPerMonth = frequencyData.avgDaysPerMonth;\n\n    // Calculate the hourly rate based on area and adjustments\n    const baseRate = 250; // Example base rate\n    const hourlyRate =\n      baseRate -\n      (areaSize > 1 ? (areaSize - 1) * 5 : 0) +\n      (stateOfLot - 1) * 15 +\n      (congestionFactor - 1) * 15;\n\n    // Ensure hourly rate is within a minimum threshold\n    const adjustedHourlyRate = Math.max(210, hourlyRate);\n\n    // Calculate estimated job time per service based on area and frequency\n    const jobTimeEstimate = Math.max(\n      10,\n      minutesPerAcre * areaSize * (1 + (congestionFactor === 2 ? 0.15 : congestionFactor === 3 ? 0.25 : 0))\n    );\n\n    // Calculate estimated cost per service (time in hours * hourly rate)\n    const estimatedCost = (jobTimeEstimate / 60) * adjustedHourlyRate;\n\n    // Apply discount to calculate total bid amount per service\n    const totalBidAmount = estimatedCost * (1 - discount / 100);\n\n    // Calculate monthly total bid by multiplying by average number of days per month\n    const totalMonthlyAmount = totalBidAmount * avgDaysPerMonth;\n\n    return {\n      hourlyRate: adjustedHourlyRate,\n      jobTimeEstimate,\n      estimatedCost,\n      totalBidAmount,\n      totalMonthlyAmount,\n    };\n  };\n\n  return (\n    <form>\n      {/* Inputs for frequency, areaSize, stateOfLot, congestion, and discount */}\n      <button onClick={handleCalculate}>Calculate</button>\n    </form>\n  );\n};\n\nexport default CalculatorForm;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAkBxC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAc,EAAE,CAAC;EACzD,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAS,CAAC,CAAC;EACvD,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAS,CAAC,CAAC;EACvD,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAS,CAAC,CAAC;EAInD,MAAMe,eAAe,GAAIC,MAAyB,IAAyB;IACzE,MAAM;MAAEX,SAAS;MAAEE,QAAQ;MAAEE,UAAU;MAAEQ,gBAAgB;MAAEJ;IAAS,CAAC,GAAGG,MAAM;;IAE9E;IACA,MAAME,aAAa,GAAGC,YAAY,CAACC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,GAAG,KAAKjB,SAAS,CAAC;IACnE,IAAI,CAACa,aAAa,EAAE,MAAM,IAAIK,KAAK,CAAC,mBAAmB,CAAC;IAExD,MAAMC,cAAc,GAAGN,aAAa,CAACM,cAAc;IACnD,MAAMC,eAAe,GAAGP,aAAa,CAACO,eAAe;;IAErD;IACA,MAAMC,QAAQ,GAAG,GAAG,CAAC,CAAC;IACtB,MAAMC,UAAU,GACdD,QAAQ,IACPnB,QAAQ,GAAG,CAAC,GAAG,CAACA,QAAQ,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GACvC,CAACE,UAAU,GAAG,CAAC,IAAI,EAAE,GACrB,CAACQ,gBAAgB,GAAG,CAAC,IAAI,EAAE;;IAE7B;IACA,MAAMW,kBAAkB,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAG,EAAEH,UAAU,CAAC;;IAEpD;IACA,MAAMI,eAAe,GAAGF,IAAI,CAACC,GAAG,CAC9B,EAAE,EACFN,cAAc,GAAGjB,QAAQ,IAAI,CAAC,IAAIU,gBAAgB,KAAK,CAAC,GAAG,IAAI,GAAGA,gBAAgB,KAAK,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,CACtG,CAAC;;IAED;IACA,MAAMe,aAAa,GAAID,eAAe,GAAG,EAAE,GAAIH,kBAAkB;;IAEjE;IACA,MAAMK,cAAc,GAAGD,aAAa,IAAI,CAAC,GAAGnB,QAAQ,GAAG,GAAG,CAAC;;IAE3D;IACA,MAAMqB,kBAAkB,GAAGD,cAAc,GAAGR,eAAe;IAE3D,OAAO;MACLE,UAAU,EAAEC,kBAAkB;MAC9BG,eAAe;MACfC,aAAa;MACbC,cAAc;MACdC;IACF,CAAC;EACH,CAAC;EAED,oBACEhC,OAAA;IAAAiC,QAAA,eAEEjC,OAAA;MAAQkC,OAAO,EAAErB,eAAgB;MAAAoB,QAAA,EAAC;IAAS;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEX,CAAC;AAACpC,EAAA,CA5DID,cAAc;AAAAsC,EAAA,GAAdtC,cAAc;AA8DpB,eAAeA,cAAc;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}